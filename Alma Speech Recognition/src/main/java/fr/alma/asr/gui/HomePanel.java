/*
 * PanelHome.java
 *
 * Created on 6 mars 2010, 11:16:52
 */

package fr.alma.asr.gui;

import fr.alma.asr.entities.Folder;
import fr.alma.asr.entities.Lesson;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JLabel;

/**
 * Panel d'acceuil.
 * @author Braud Jeremy
 */
public class HomePanel extends javax.swing.JPanel {

    /** Creates new form PanelHome. */
    public HomePanel() {
		initialisation();
        initComponents();
		postInit();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelClasser = new javax.swing.JLabel();
        comboCours = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        comboDate = new javax.swing.JComboBox();
        jScrollPane = new javax.swing.JScrollPane();
        panelCours = new javax.swing.JPanel();
        labelClasser.setText("Classer les cours par :");
        jScrollPane.setBorder(null);
        comboCours.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cours", "Date" }));
        comboCours.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCoursItemStateChanged(evt);
            }
        });

        jLabel7.setText("et par date de :");

        comboDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "création", "modification" }));
        comboDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboDateItemStateChanged(evt);
            }
        });

        panelCours.setLayout(new javax.swing.BoxLayout(panelCours, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane.setViewportView(panelCours);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelClasser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboCours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelClasser)
                    .addComponent(comboCours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(comboDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Changement d'état de la combo date.
	 * @param evt l'évenement capturé
	 */
	private void comboDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboDateItemStateChanged
		this.classerParCreation = comboDate.getSelectedIndex() == 0;
		updateListeFichiers();
	}//GEN-LAST:event_comboDateItemStateChanged

	/**
	 * Changement d'état de la combo cours.
	 * @param evt l'évenement capturé
	 */
	private void comboCoursItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCoursItemStateChanged
		this.classerParModule = comboCours.getSelectedIndex() == 0;
		updateListeFichiers();
	}//GEN-LAST:event_comboCoursItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboCours;
    private javax.swing.JComboBox comboDate;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel labelClasser;
    private javax.swing.JPanel panelCours;
    // End of variables declaration//GEN-END:variables

	/** Le controleur. */
	private Controleur controleur;
	/** Si on doit classer par création ou modification. */
	private Boolean classerParCreation;
	/** Si on tri d'abord par module ou par date. */
	private Boolean classerParModule;

	/**
	 * Initialisation.
	 */
	private void initialisation() {
		this.controleur = Controleur.getInstance();
		this.classerParCreation = Boolean.TRUE;
		this.classerParModule = Boolean.TRUE;
	}

	/**
	 * Dernière initialisation.
	 */
	private void postInit() {
		updateListeFichiers();
		this.controleur.setHomePanel(this);
	}
	
	/**
	 * Mise à jour de la liste des fichier sur le panel.
	 */
	private void updateListeFichiers() {
		if (classerParModule) {
			this.panelCours.removeAll();
			List<Folder> listeModules = controleur.getListeModules();
			List<Lesson> listeCours;
			for (Folder folder : listeModules) {
				listeCours = controleur.getListeFichiers(folder, classerParCreation);
				JLabel titreModule = new JLabel("<html><body><strong><span style='font-size: 15pt ;'>"+folder.toString()+"</span></strong></body></html>");
				this.panelCours.add(titreModule);
				for (final Lesson lesson : listeCours) {
					JLabel titreCours = new JLabel("<html><body>&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-size: 12pt ;'><a href=''>"+lesson.toString()+"</a></span></body></html>");
					titreCours.addMouseListener(new MouseListener() {
						@Override
						public void mouseClicked(MouseEvent e) {
							controleur.ouvrirFichier(lesson);
						}
						@Override
						public void mousePressed(MouseEvent e) {}
						@Override
						public void mouseReleased(MouseEvent e) {}
						@Override
						public void mouseEntered(MouseEvent e) {}
						@Override
						public void mouseExited(MouseEvent e) {}
					});
					this.panelCours.add(titreCours);
				}
				JLabel labelEspace = new JLabel(" ");
				this.panelCours.add(labelEspace);
			}
		} else {
			this.panelCours.removeAll();
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			List<Lesson> listeFichier = controleur.getListeFichiers(classerParCreation);
			String dateCourante = null;
			for (final Lesson fichier : listeFichier) {
				if (classerParCreation) {
					if (dateCourante == null || !dateCourante.equals(dateFormat.format(fichier.getDateCreation()))) {
						dateCourante = dateFormat.format(fichier.getDateCreation());
						panelCours.add(new JLabel("<html><body><strong>"+dateCourante+"</strong></body></html>"));
					}
				} else {
					if (dateCourante == null || !dateCourante.equals(dateFormat.format(fichier.getDateModification()))) {
						dateCourante = dateFormat.format(fichier.getDateModification());
						panelCours.add(new JLabel("<html><body><strong>"+dateCourante+"</strong></body></html>"));
					}
				}
				String module = controleur.getModule(fichier);
				JLabel titreCours = new JLabel("<html><body>&nbsp;&nbsp;&nbsp;&nbsp;" + module + " - <a href=''>" + fichier.toString() + "</a></body></html>");
				titreCours.addMouseListener(new MouseListener() {
						@Override
						public void mouseClicked(MouseEvent e) {
							controleur.ouvrirFichier(fichier);
						}
						@Override
						public void mousePressed(MouseEvent e) {}
						@Override
						public void mouseReleased(MouseEvent e) {}
						@Override
						public void mouseEntered(MouseEvent e) {}
						@Override
						public void mouseExited(MouseEvent e) {}
					});
				this.panelCours.add(titreCours);
			}
		}
		this.panelCours.updateUI();
	}

	/**
	 * Méthode appelée par le controleur.
	 */
	public void update() {
		updateListeFichiers();
	}

}
